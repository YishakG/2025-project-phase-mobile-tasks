// Mocks generated by Mockito 5.4.6 from annotations
// in shoe_interface/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shoe_interface/core/error/failures.dart' as _i6;
import 'package:shoe_interface/core/error/platform/network_info.dart' as _i8;
import 'package:shoe_interface/features/product/data/dataSources/product_local_data_source.dart'
    as _i10;
import 'package:shoe_interface/features/product/data/dataSources/product_remote_data_source.dart'
    as _i9;
import 'package:shoe_interface/features/product/data/models/product_model.dart'
    as _i3;
import 'package:shoe_interface/features/product/domain/entities/product_entitiy.dart'
    as _i7;
import 'package:shoe_interface/features/product/domain/repositories/product_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i4.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.ProductEntitiy>>>
  viewAllProducts() =>
      (super.noSuchMethod(
            Invocation.method(#viewAllProducts, []),
            returnValue: _i5.Future<
              _i2.Either<_i6.Failure, List<_i7.ProductEntitiy>>
            >.value(
              _FakeEither_0<_i6.Failure, List<_i7.ProductEntitiy>>(
                this,
                Invocation.method(#viewAllProducts, []),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.ProductEntitiy>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>> getProductById(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>>.value(
                  _FakeEither_0<_i6.Failure, _i7.ProductEntitiy>(
                    this,
                    Invocation.method(#getProductById, [id]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>> createProduct(
    _i7.ProductEntitiy? product,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>>.value(
                  _FakeEither_0<_i6.Failure, _i7.ProductEntitiy>(
                    this,
                    Invocation.method(#createProduct, [product]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>> updateProduct(
    _i7.ProductEntitiy? product,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>>.value(
                  _FakeEither_0<_i6.Failure, _i7.ProductEntitiy>(
                    this,
                    Invocation.method(#updateProduct, [product]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.ProductEntitiy>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> deleteProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteProduct, [id]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i8.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i9.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.ProductModel> createProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue: _i5.Future<_i3.ProductModel>.value(
              _FakeProductModel_1(
                this,
                Invocation.method(#createProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.ProductModel>);

  @override
  _i5.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.ProductModel> getProductById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue: _i5.Future<_i3.ProductModel>.value(
              _FakeProductModel_1(
                this,
                Invocation.method(#getProductById, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.ProductModel>);

  @override
  _i5.Future<_i3.ProductModel> updateProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i5.Future<_i3.ProductModel>.value(
              _FakeProductModel_1(
                this,
                Invocation.method(#updateProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.ProductModel>);

  @override
  _i5.Future<List<_i3.ProductModel>> viewAllProducts() =>
      (super.noSuchMethod(
            Invocation.method(#viewAllProducts, []),
            returnValue: _i5.Future<List<_i3.ProductModel>>.value(
              <_i3.ProductModel>[],
            ),
          )
          as _i5.Future<List<_i3.ProductModel>>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i10.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.ProductModel> getLastProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getLastProduct, [id]),
            returnValue: _i5.Future<_i3.ProductModel>.value(
              _FakeProductModel_1(
                this,
                Invocation.method(#getLastProduct, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.ProductModel>);

  @override
  _i5.Future<List<_i3.ProductModel>> getLastProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getLastProducts, []),
            returnValue: _i5.Future<List<_i3.ProductModel>>.value(
              <_i3.ProductModel>[],
            ),
          )
          as _i5.Future<List<_i3.ProductModel>>);

  @override
  _i5.Future<void> cacheProduct(_i3.ProductModel? prooduct) =>
      (super.noSuchMethod(
            Invocation.method(#cacheProduct, [prooduct]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cacheProducts(List<_i3.ProductModel>? productsToCache) =>
      (super.noSuchMethod(
            Invocation.method(#cacheProducts, [productsToCache]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
